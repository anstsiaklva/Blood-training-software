Index: gui.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nimport matplotlib.pyplot as plt\r\nfrom tkinter import ttk\r\nimport wk_calc\r\nfrom matplotlib.figure import Figure\r\nfrom matplotlib.backends.backend_tkagg import (\r\n    FigureCanvasTkAgg,\r\n    NavigationToolbar2Tk\r\n)\r\n\r\nwidget_labels={'HR':'.foo.hr',\r\n               'SV':'.foo.sv',\r\n               'Pressure':'.foo.pressure',\r\n               'Plot':'.foo.plot'\r\n               }\r\n\r\n\r\n# plot function is created for\r\n# plotting the graph in\r\n# tkinter window\r\n\r\ndef plot(label,eHR,eSV,eR,eC, root, adrenaline, adenosine, vasodilators):\r\n    # the figure that will contain the plot\r\n\r\n   #fig = Figure(figsize=(5, 5), dpi=100)\r\n\r\n    # adding the subplot\r\n   # plot1 = fig.add_subplot(111)\r\n\r\n\r\n\r\n    # plotting the graph\r\n\r\n    SV = float(eSV.get())\r\n    HR = float(eHR.get())\r\n    tsys = 0.33\r\n    R1 = 0\r\n    R2 = float(eR.get())\r\n    C = float(eC.get())\r\n    Pout = 35\r\n    L = 0\r\n    if adrenaline:\r\n        P = wk_calc.calcPressure(SV, HR, tsys, R1, R2, C, Pout, L)\r\n    elif adenosine:\r\n        P = wk_calc.calcPressure(SV, HR, tsys, R1, R2, C, Pout, L)\r\n    elif vasodilators:\r\n        P = wk_calc.calcPressure(SV, HR, tsys, R1, R2, C, Pout, L)\r\n    else:\r\n        P = wk_calc.calcPressure(SV, HR, tsys, R1, R2, C, Pout, L)\r\n    Psys = round(max(P))\r\n    Pdia = round(min(P))\r\n\r\n    myString = \"Pressure: \" + str(Psys)+\"/\"+str(Pdia) + \" mmHg\"\r\n    label.config(text = myString)\r\n\r\n    # create a figure\r\n    figure = Figure(figsize=(5, 5), dpi=100)\r\n\r\n    # create FigureCanvasTkAgg object\r\n    figure_canvas = FigureCanvasTkAgg(figure, root)\r\n    # create the toolbar\r\n\r\n    # create axes\r\n    axes = figure.add_subplot()\r\n\r\n    # create the barchart\r\n    axes.plot(P)\r\n    axes.set_title('Pressure')\r\n    axes.grid()\r\n\r\n    figure_canvas.get_tk_widget().grid(row=1, column=3)\r\n    figure_canvas.draw()\r\n\r\ndef make_buttons(root):\r\n    frame = ttk.Frame(root, name='foo')\r\n    frame.columnconfigure(0, weight=1)\r\n    frame.columnconfigure(0, weight=1)\r\n    frame.columnconfigure(0, weight=3)\r\n    # HR label and entry\r\n    ttk.Label(frame, text='HR (bpm)').grid(column=0, row=0, sticky=tk.W)\r\n    e_hr = ttk.Entry(frame, width=30, name='hr')\r\n    e_hr.grid(column=1, row=0, sticky=tk.W)\r\n\r\n    # SV label and entry\r\n    ttk.Label(frame, text='SV (ml)').grid(column=0, row=1, sticky=tk.W)\r\n    v_hr = ttk.Entry(frame, width=30, name='sv')\r\n    v_hr.grid(column=1, row=1, sticky=tk.W)\r\n\r\n    # Add adrenaline button\r\n    ttk.Button(frame, text='Add adrenaline').grid(column=0, row=2)\r\n\r\n    # Remove adrenaline button\r\n    ttk.Button(frame, text='Remove adrenaline').grid(column=1, row=2)\r\n\r\n    # Add adenosine button\r\n    ttk.Button(frame, text='Add adenosine').grid(column=0, row=3)\r\n\r\n    # Remove adenosine button\r\n    ttk.Button(frame, text='Remove adenosine').grid(column=1, row=3)\r\n\r\n    # Add vaso button\r\n    ttk.Button(frame, text='Add vaso').grid(column=0, row=4)\r\n\r\n    # Remove vaso button\r\n    ttk.Button(frame, text='Remove vaso').grid(column=1, row=4)\r\n\r\n\r\n    ttk.Label(frame, text=\"Pressure: \", font=\"Arial 25\").grid(column=2, row=0)\r\n\r\n    for widget in frame.winfo_children():\r\n        widget.grid(padx=0, pady=3)\r\n\r\n    return frame\r\n\r\n\r\n\"\"\"\r\n    # Replace with:\r\n    ttk.Label(frame, text='Replace with:').grid(column=0, row=1, sticky=tk.W)\r\n    replacement = ttk.Entry(frame, width=30)\r\n    replacement.grid(column=1, row=1, sticky=tk.W)\r\n\r\n    # Match Case checkbox\r\n    match_case = tk.StringVar()\r\n    match_case_check = ttk.Checkbutton(\r\n        frame,\r\n        text='Match case',\r\n        variable=match_case,\r\n        command=lambda: print(match_case.get()))\r\n    match_case_check.grid(column=0, row=2, sticky=tk.W)\r\n\r\n    # Wrap Around checkbox\r\n    wrap_around = tk.StringVar()\r\n    wrap_around_check = ttk.Checkbutton(\r\n        frame,\r\n        variable=wrap_around,\r\n        text='Wrap around',\r\n        command=lambda: print(wrap_around.get()))\r\n    wrap_around_check.grid(column=0, row=3, sticky=tk.W)\r\n\r\n    for widget in frame.winfo_children():\r\n        widget.grid(padx=0, pady=5)\r\n\r\n    return frame\r\n\r\n    lHR = tk.Label(text=\"HR (bpm)\", font=\"Arial 14\")\r\n    lSV = tk.Label(text=\"SV (ml)\", font=\"Arial 14\")\r\n    lR = tk.Label(text=\"R\", font=\"Arial 14\")\r\n    lC = tk.Label(text=\"C\", font=\"Arial 14\")\r\n\r\n    lHR.place(x=10, y=20)\r\n    lSV.place(x=10, y=50)\r\n    lR.place(x=10, y=80)\r\n    lC.place(x=10, y=110)\r\n\r\n    eHR = tk.Entry(width=10)\r\n    eHR.insert(0, \"65\")\r\n    eSV = tk.Entry(width=10)\r\n    eSV.insert(0, \"70\")\r\n    eR = tk.Entry(width=10)\r\n    eR.insert(0, \"0.7\")\r\n    eC = tk.Entry(width=10)\r\n    eC.insert(0, \"2.196\")\r\n\"\"\"\r\n\r\ndef main():\r\n    root = tk.Tk()\r\n    root.title('Plotting the pressure')\r\n    root.geometry(\"1000x500\")\r\n\r\n\r\n    fr = make_buttons(root)\r\n\r\n    #root.columnconfigure(0, weight=4)\r\n    fr.grid(column=0, row=0)\r\n\r\n\r\n    adrenaline = False\r\n    adenosine = False\r\n    vasolidators = False\r\n    root.mainloop()\r\n\r\n\r\n\"\"\"\r\n    eHR.place(x=120, y=25)\r\n    eSV.place(x=120, y=55)\r\n    eR.place(x=120, y=85)\r\n    eC.place(x=120, y=115)\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\n    plot_button = tk.Button(master=root,\r\n                            command = lambda: plot(ansL,eHR,eSV,eR,eC, root, adrenaline, adenosine, vasolidators),\r\n                            height=1, width=20,\r\n                            text=\"Calc Pressure\",\r\n                            font=\"Arial 14\")\r\n    plot_button.place(x=10, y=150)\r\n\"\"\"\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gui.py b/gui.py
--- a/gui.py	
+++ b/gui.py	
@@ -11,7 +11,10 @@
 widget_labels={'HR':'.foo.hr',
                'SV':'.foo.sv',
                'Pressure':'.foo.pressure',
-               'Plot':'.foo.plot'
+               'Plot':'.foo.plot',
+               'PSys':'.foo.psys',
+               'PDys':'.foo.pdys',
+               'Pressure':'.foo.pres'
                }
 
 
@@ -19,7 +22,15 @@
 # plotting the graph in
 # tkinter window
 
-def plot(label,eHR,eSV,eR,eC, root, adrenaline, adenosine, vasodilators):
+def add_plot(root):
+    figure = Figure(figsize=(5, 5), dpi=100)
+
+    # create FigureCanvasTkAgg object
+    figure_canvas = FigureCanvasTkAgg(figure, root)
+    # create the toolbar
+    return figure_canvas
+
+def plot(label,eHR,eSV, root):
     # the figure that will contain the plot
 
    #fig = Figure(figsize=(5, 5), dpi=100)
@@ -31,19 +42,23 @@
 
     # plotting the graph
 
+    adrenaline = False
+    adenosine = False
+    vasolidators = False
+
     SV = float(eSV.get())
     HR = float(eHR.get())
     tsys = 0.33
     R1 = 0
-    R2 = float(eR.get())
-    C = float(eC.get())
+    R2 = 1
+    C = 1.5
     Pout = 35
     L = 0
     if adrenaline:
         P = wk_calc.calcPressure(SV, HR, tsys, R1, R2, C, Pout, L)
     elif adenosine:
         P = wk_calc.calcPressure(SV, HR, tsys, R1, R2, C, Pout, L)
-    elif vasodilators:
+    elif vasolidators:
         P = wk_calc.calcPressure(SV, HR, tsys, R1, R2, C, Pout, L)
     else:
         P = wk_calc.calcPressure(SV, HR, tsys, R1, R2, C, Pout, L)
@@ -54,7 +69,7 @@
     label.config(text = myString)
 
     # create a figure
-    figure = Figure(figsize=(5, 5), dpi=100)
+    figure = Figure(figsize=(5,3))
 
     # create FigureCanvasTkAgg object
     figure_canvas = FigureCanvasTkAgg(figure, root)
@@ -65,138 +80,91 @@
 
     # create the barchart
     axes.plot(P)
-    axes.set_title('Pressure')
     axes.grid()
 
-    figure_canvas.get_tk_widget().grid(row=1, column=3)
+    figure_canvas.get_tk_widget().grid(row=1, column=2, rowspan=7)
     figure_canvas.draw()
 
 def make_buttons(root):
+    width=20
     frame = ttk.Frame(root, name='foo')
     frame.columnconfigure(0, weight=1)
-    frame.columnconfigure(0, weight=1)
-    frame.columnconfigure(0, weight=3)
+    frame.columnconfigure(0, weight=2)
+    frame.columnconfigure(0, weight=4)
     # HR label and entry
-    ttk.Label(frame, text='HR (bpm)').grid(column=0, row=0, sticky=tk.W)
-    e_hr = ttk.Entry(frame, width=30, name='hr')
+    ttk.Label(frame, text='HR (bpm)', width=width)\
+        .grid(column=0, row=0, sticky=tk.W)
+    e_hr = ttk.Entry(frame, width=width, name='hr')
     e_hr.grid(column=1, row=0, sticky=tk.W)
 
     # SV label and entry
-    ttk.Label(frame, text='SV (ml)').grid(column=0, row=1, sticky=tk.W)
-    v_hr = ttk.Entry(frame, width=30, name='sv')
-    v_hr.grid(column=1, row=1, sticky=tk.W)
+    ttk.Label(frame, text='SV (ml)',width=width)\
+        .grid(column=0, row=1, sticky=tk.W)
+    e_sv = ttk.Entry(frame, width=width, name='sv')
+    e_sv.grid(column=1, row=1, sticky=tk.W)
+
+    # Psys label and entry
+    ttk.Label(frame, text='P.sys (hhMg)', width=width)\
+        .grid(column=0, row=2, sticky=tk.W)
+    p_sys = ttk.Entry(frame, width=width, name='psys')
+    p_sys.grid(column=1, row=2, sticky=tk.W)
+
+    # Pdyd label and entry
+    ttk.Label(frame, text='P.dys (hhMg)', width=width)\
+        .grid(column=0, row=3, sticky=tk.W)
+    p_dys = ttk.Entry(frame, width=width, name='pdys')
+    p_dys.grid(column=1, row=3, sticky=tk.W)
 
     # Add adrenaline button
-    ttk.Button(frame, text='Add adrenaline').grid(column=0, row=2)
+    ttk.Button(frame, text='Add adrenaline',width=width, cursor='pirate')\
+        .grid(column=0, row=4)
 
     # Remove adrenaline button
-    ttk.Button(frame, text='Remove adrenaline').grid(column=1, row=2)
+    ttk.Button(frame, text='Remove adrenaline',width=width)\
+        .grid(column=1, row=4)
 
     # Add adenosine button
-    ttk.Button(frame, text='Add adenosine').grid(column=0, row=3)
+    ttk.Button(frame, text='Add adenosine',width=width)\
+        .grid(column=0, row=5)
 
     # Remove adenosine button
-    ttk.Button(frame, text='Remove adenosine').grid(column=1, row=3)
+    ttk.Button(frame, text='Remove adenosine',width=width)\
+        .grid(column=1, row=5)
 
     # Add vaso button
-    ttk.Button(frame, text='Add vaso').grid(column=0, row=4)
+    ttk.Button(frame, text='Add vaso',width=width)\
+        .grid(column=0, row=6)
 
     # Remove vaso button
-    ttk.Button(frame, text='Remove vaso').grid(column=1, row=4)
-
-
-    ttk.Label(frame, text="Pressure: ", font="Arial 25").grid(column=2, row=0)
-
-    for widget in frame.winfo_children():
-        widget.grid(padx=0, pady=3)
-
-    return frame
+    ttk.Button(frame, text='Remove vaso', width=width)\
+        .grid(column=1, row=6)
 
+    # Pressure label
+    label = tk.Label(frame, text="Pressure: ", font="Arial 20",width=width, name='pres')
+    label.grid(column=2, row=0, rowspan=2, sticky=tk.N)
 
-"""
-    # Replace with:
-    ttk.Label(frame, text='Replace with:').grid(column=0, row=1, sticky=tk.W)
-    replacement = ttk.Entry(frame, width=30)
-    replacement.grid(column=1, row=1, sticky=tk.W)
-
-    # Match Case checkbox
-    match_case = tk.StringVar()
-    match_case_check = ttk.Checkbutton(
-        frame,
-        text='Match case',
-        variable=match_case,
-        command=lambda: print(match_case.get()))
-    match_case_check.grid(column=0, row=2, sticky=tk.W)
-
-    # Wrap Around checkbox
-    wrap_around = tk.StringVar()
-    wrap_around_check = ttk.Checkbutton(
-        frame,
-        variable=wrap_around,
-        text='Wrap around',
-        command=lambda: print(wrap_around.get()))
-    wrap_around_check.grid(column=0, row=3, sticky=tk.W)
+    # Calculate pressure button
+    ttk.Button(frame, text='Calculate pressure', width=width * 2 + 4,
+               command=lambda: plot(label, e_hr, e_sv, frame)) \
+        .grid(column=0, row=7, columnspan=2)
 
     for widget in frame.winfo_children():
-        widget.grid(padx=0, pady=5)
+        widget.grid(padx=5, pady=11)
 
     return frame
 
-    lHR = tk.Label(text="HR (bpm)", font="Arial 14")
-    lSV = tk.Label(text="SV (ml)", font="Arial 14")
-    lR = tk.Label(text="R", font="Arial 14")
-    lC = tk.Label(text="C", font="Arial 14")
-
-    lHR.place(x=10, y=20)
-    lSV.place(x=10, y=50)
-    lR.place(x=10, y=80)
-    lC.place(x=10, y=110)
-
-    eHR = tk.Entry(width=10)
-    eHR.insert(0, "65")
-    eSV = tk.Entry(width=10)
-    eSV.insert(0, "70")
-    eR = tk.Entry(width=10)
-    eR.insert(0, "0.7")
-    eC = tk.Entry(width=10)
-    eC.insert(0, "2.196")
-"""
-
 def main():
     root = tk.Tk()
+    root.resizable(0, 0)
     root.title('Plotting the pressure')
-    root.geometry("1000x500")
+    root.geometry("800x400")
+
 
 
     fr = make_buttons(root)
-
-    #root.columnconfigure(0, weight=4)
     fr.grid(column=0, row=0)
 
-
-    adrenaline = False
-    adenosine = False
-    vasolidators = False
     root.mainloop()
 
-
-"""
-    eHR.place(x=120, y=25)
-    eSV.place(x=120, y=55)
-    eR.place(x=120, y=85)
-    eC.place(x=120, y=115)
-"""
-
-
-"""
-    plot_button = tk.Button(master=root,
-                            command = lambda: plot(ansL,eHR,eSV,eR,eC, root, adrenaline, adenosine, vasolidators),
-                            height=1, width=20,
-                            text="Calc Pressure",
-                            font="Arial 14")
-    plot_button.place(x=10, y=150)
-"""
-
-
 if __name__ == '__main__':
     main()
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"2ff1c6dd-4256-4e4a-baf5-f6a1b8231437\" name=\"Changes\" comment=\"Newest commit\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/gui.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/gui.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"28ePlFXJyjQlKKZCsXGDkIYBNya\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;last_opened_file_path&quot;: &quot;D:/Anaconda/pkgs&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\" selected=\"Python.gui\">\r\n    <configuration name=\"gui\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Blood\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/gui.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"Blood\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"wk_calc\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Blood\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/wk_calc.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Python.main\" />\r\n      <item itemvalue=\"Python.gui\" />\r\n      <item itemvalue=\"Python.wk_calc\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.gui\" />\r\n        <item itemvalue=\"Python.wk_calc\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"2ff1c6dd-4256-4e4a-baf5-f6a1b8231437\" name=\"Changes\" comment=\"\" />\r\n      <created>1651574226943</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1651574226943</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Newest commit\">\r\n      <created>1651581526095</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1651581526095</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"HEAD\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Newest commit\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Newest commit\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/main.py</url>\r\n          <line>8</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,7 +4,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="2ff1c6dd-4256-4e4a-baf5-f6a1b8231437" name="Changes" comment="Newest commit">
+    <list default="true" id="2ff1c6dd-4256-4e4a-baf5-f6a1b8231437" name="Changes" comment="Ebat' copat' che poluchilos'">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/gui.py" beforeDir="false" afterPath="$PROJECT_DIR$/gui.py" afterDir="false" />
     </list>
@@ -130,7 +130,14 @@
       <option name="project" value="LOCAL" />
       <updated>1651581526095</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="Ebat' copat' che poluchilos'">
+      <created>1651662672590</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1651662672590</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -158,7 +165,8 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="Newest commit" />
-    <option name="LAST_COMMIT_MESSAGE" value="Newest commit" />
+    <MESSAGE value="Ebat' copat' che poluchilos'" />
+    <option name="LAST_COMMIT_MESSAGE" value="Ebat' copat' che poluchilos'" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
